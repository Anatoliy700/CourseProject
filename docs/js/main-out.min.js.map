{"version":3,"sources":["js.js","comment/Comment.js","comment/commentBlock.js","comment/validateForm.js","basket/Basket.js","basket/Good.js","basket/main-basket.js"],"names":["Comment","commentId","name","message","_classCallCheck","this","text","id_comment","classContainer","className","classMessage","classDelBtn","classApprovelBtn","$jQueryElement","$containerComment","$","class","data-id","data-approved","$nameComment","$messageComment","$delBtnComment","data-type","$approveBtnComment","append","appendTo","settings","idContainer","idCommentBlock","classCommentApproved","urlGetAllComments","urlDelComment","urlApprovalComment","urlAddComment","commentBlock","$elCommentBlock","arrAllComments","init","_this","on","event","btnClickHandler","ajax","url","data","success","result","console","error","error_message","comments","render","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","obj","value","err","return","target","dataset","type","remove","approve","preventDefault","add","elem","_this2","id","parent","addClass","attr","alert","_this3","validateForm","startValidate","parents","find","classValidateInput","removeClass","userNameInput","siblings","userMessageInput","userName","val","userMessage","userId","Math","floor","random","id_user","arrComments","push","param","dataType","textStatus","jqXHR","idInputName","idInputPhone","idInputEmail","idInputMessage","idBtnSubmit","classElemOutErr","classNoValidateInput","errorMessage","nameUser","phone","email","commentUser","regExpName","regExpPhone","regExpEmail","regExpMessage","form","arr","valid","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","validateInput","outMessageFailValidate","test","trim","validate","arguments","elemError","document","getElementById","parentElement","removeChild","classList","createElement","insertBefore","nextElementSibling","innerText","effect","Basket","basketSettings","countGoods","amount","basketItems","$productsWrap","$elemCounter","idCountGoods","$elemTotalPrice","classWrapProducts","classTotalValue","$priceTotalWrap","classWrapPriceTotal","classTotalDescription","$buttonsWrap","classWrapButton","classButtonCheckout","classButtonGoToCart","getBasket","pathJsonFile","context","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","basket","item","quantity","refresh","log","id_product","title","price","src","basketNewItem","ind","findIndex","idProduct","arrInd","splice","count","setCounterAndTotalPrice","empty","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Good","basketRun","classWrapProductItems","classProductItem","classProductTitle","classProductPrice","classProductImage","idWrapTopBasket","idTotalValue","$elemWrapTopBasket","$ElemDropBasket","_this4","currentTarget","parseInt","$wrapProduct","$elem","goodAddToBasket","showDialog","droppInit","_basket","apply","_this5","draggable","helper","scope","addClasses","cursorAt","left","top","cursor","start","ui","stop","droppable","activeClass","tolerance","drop","$dialog","dialog","hide","duration","position","my","at","close","setTimeout","ready"],"mappings":"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","file":"main-out.min.js","sourcesContent":["\"use strict\";\r\n\r\n","/**\r\n * Класс реализует блок комментария и вывод его на страницу.\r\n */\r\nclass Comment {\r\n\r\n  /**\r\n   * Конструктор класса.\r\n   * @param {int} commentId id комментария в бызе данных.\r\n   * @param {string} name имя пользователя, оставившего комментарий.\r\n   * @param {string} message текст комментария.\r\n   */\r\n  constructor(commentId, name, message) {\r\n    // this.id_user = userId;\r\n    this.text = message;\r\n    this.id_comment = commentId;\r\n    this.name = name;\r\n    this.classContainer = 'comment-item';\r\n    this.className = 'comment-item_name';\r\n    this.classMessage = 'comment-item_message';\r\n    this.classDelBtn = 'comment-item_del-btn';\r\n    this.classApprovelBtn = 'comment-item_approve-btn';\r\n  }\r\n\r\n  /**\r\n   * Собирает блок с комментарием и выводит его на страницу.\r\n   * @param {jQuery} $jQueryElement элемент-обертка в которую выводим комментарии.\r\n   */\r\n  render($jQueryElement) {\r\n    const $containerComment = $('<div />', {\r\n      class: this.classContainer,\r\n      'data-id': this.id_comment,\r\n      'data-approved': false,\r\n    });\r\n    const $nameComment = $('<p />', {\r\n      class: this.className,\r\n      text: this.name,\r\n    });\r\n    const $messageComment = $('<p />', {\r\n      class: this.classMessage,\r\n      text: this.text,\r\n    });\r\n    const $delBtnComment = $('<button />', {\r\n      class: this.classDelBtn,\r\n      'data-id': this.id_comment,\r\n      'data-type': 'del',\r\n      text: 'Удалить',\r\n    });\r\n    const $approveBtnComment = $('<button />', {\r\n      class: this.classApprovelBtn,\r\n      'data-id': this.id_comment,\r\n      'data-type': 'app',\r\n      text: 'Одобрить',\r\n    });\r\n    $containerComment\r\n      .append($nameComment)\r\n      .append($messageComment)\r\n      .append($delBtnComment)\r\n      .append($approveBtnComment)\r\n      .appendTo($jQueryElement);\r\n  }\r\n}","\"use strict\";\r\n\r\n/**\r\n * Оббъект с настройками для работы скрипта.\r\n * @property {string} idContainer id элемента основного контейнера\r\n * @property {string} idCommentBlock id элемента контейнера для вывода комментариев.\r\n * @property {string} classCommentApproved class присваеваемый одобренному комментарию.\r\n * @property {string} urlGetAllComments путь к файлу(заглушке) JSON ответа сервера при получении комментариев.\r\n * @property {string} urlDelComment путь к файлу(заглушке) JSON ответа сервера при удалении комментария.\r\n * @property {string} urlApprovalComment путь к файлу(заглушке) JSON ответа сервера при одобрении комментария.\r\n * @property {string} urlAddComment путь к файлу(заглушке) JSON ответа сервера при добавлении комментария.\r\n */\r\nconst settings = {\r\n  idContainer: 'container',\r\n  idCommentBlock: 'comment_wrapper',\r\n  classCommentApproved: 'approved',\r\n  urlGetAllComments: 'json/review.list.json',\r\n  urlDelComment: 'json/review.delete.json',\r\n  urlApprovalComment: 'json/review.submit.json',\r\n  urlAddComment: 'json/review.add.json',\r\n};\r\n\r\n/**\r\n * Объект работы с комментариями.\r\n * @property {Object} settings подключение объекта с настройками.\r\n * @property {jQuery} $elCommentBlock элемент-обертка для выводимых комментариев.\r\n * @property {Array} arrAllComments массив для комментариев, получаемых с сервера.\r\n */\r\nconst commentBlock = {\r\n  settings,\r\n  $elCommentBlock: null,\r\n  arrAllComments: [],\r\n\r\n  /**\r\n   * Инициализация блока с комментариями, запрос к серверу для получения текущих комментариев.\r\n   * Получает комментарии с сервера и отрисовавает их.\r\n   * Навшивает обработчик события нажатия кнопок.\r\n   * В случае ошибки ответа от сервера, выводит сообщение об ошибке в консоль.\r\n   */\r\n  init() {\r\n    this.$elCommentBlock = $(`#${this.settings.idCommentBlock}`);\r\n    $(`#${this.settings.idContainer}`).on('click', 'button', event => this.btnClickHandler(event));\r\n    this.ajax({\r\n      url: this.settings.urlGetAllComments,\r\n      data: '',\r\n      success: data => {\r\n        if (data.result && data.result === 0) {\r\n          console.error(`Ошибка! Ответ от сервера: ${data.error_message}`);\r\n          return;\r\n        }\r\n        this.arrAllComments = data.comments;\r\n\r\n        this.render();\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Отрисовывает блоки с комментариями из массива с комментариями.\r\n   */\r\n  render() {\r\n    if (this.arrAllComments.length > 0) {\r\n      for (const obj of this.arrAllComments) {\r\n        const comment = new Comment(obj.id_comment, obj.name, obj.text);\r\n        comment.render(this.$elCommentBlock);\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Обработчик события клика по кнопке.\r\n   * Определяет какая была нажата кнопка и в зависимости от этого запускает определенный метод.\r\n   * @param {Event} event событие клика по кнопке.\r\n   */\r\n  btnClickHandler(event) {\r\n    if (event.target.dataset.type === 'del') {\r\n      this.remove(event.target);\r\n    } else if (event.target.dataset.type === 'app') {\r\n      this.approve(event.target);\r\n    } else if (event.target.dataset.type === 'add') {\r\n      event.preventDefault();\r\n      this.add(event.target);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Одобрение определенного комментария. Отправляет id одобряемого комментария на сервер и вслучае удачного ответа\r\n   * от сервера добавляет класс одобрения к текущему комментарию и удаляет кнопку одобрения у текущего комментария.\r\n   * Если сервер вернул ошибку, то выводим сообщение об ошибке и не производим ни какие изменения с комментарием.\r\n   * @param {HTMLElement} elem кнопки одобрения блока текущего комментария.\r\n   */\r\n  approve(elem) {\r\n    this.ajax({\r\n      url: this.settings.urlApprovalComment,\r\n      data: {\r\n        id_comment: elem.dataset.id\r\n      },\r\n      success: data => {\r\n        (function (data, elem, obj) {\r\n          if (data.result && data.result === 1) {\r\n            $(elem).parent('.comment-item').addClass(obj.settings.classCommentApproved)\r\n              .attr('data-approved', true);\r\n            $(elem).remove()\r\n\r\n          } else if (data.result === 0) {\r\n            alert(`Сервер вернул ошибку: ${data.error_message}`);\r\n          }\r\n        }(data, elem, this))\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Удаление определенного комментария. Отправляет id удаляемого комментария на сервер и вслучае удачного ответа\r\n   * от сервера удаляет блок данного комментария.\r\n   * Если сервер вернул ошибку, то выводим сообщение об ошибке и не производим ни какие изменения с комментарием.\r\n   * @param {HTMLElement} elem кнопки удаления блока текущего комментария.\r\n   */\r\n  remove(elem) {\r\n    this.ajax({\r\n      url: this.settings.urlDelComment,\r\n      data: {\r\n        id_comment: elem.dataset.id\r\n      },\r\n      success: data => {\r\n        (function (data, elem) {\r\n          if (data.result && data.result === 1) {\r\n            $(elem).parent(`.comment-item`).remove();\r\n          } else if (data.result === 0) {\r\n            alert(`Сервер вернул ошибку: ${data.error_message}`);\r\n          }\r\n        }(data, elem))\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Добавление нового комментария. Если доступен скрипт для валидации формы, то заускает валидацию и при прохождении\r\n   * валидации отправляет данные нового комментария на сервер и вслучае удачного ответа от сервера добавляет блок\r\n   * нового комментария но страницу.\r\n   * Если скрип валидации не доступен, то не производит процесс валидации и переходит к отправке данных.\r\n   * Если сервер вернул ошибку, то выводим сообщение об ошибке и не производим ни какие действия с комментарием.\r\n   * @param {HTMLElement} elem кнопки отправки данных формы.\r\n   */\r\n  add(elem) {\r\n    if (validateForm) {\r\n      if (!validateForm.startValidate($(elem).parents('form'))) {\r\n        return;\r\n      } else {\r\n        $(elem).parents('form').find(`.${validateForm.classValidateInput}`).removeClass(validateForm.classValidateInput);\r\n      }\r\n    }\r\n    let userNameInput = $(elem).siblings(`#nameUser`);\r\n    let userMessageInput = $(elem).siblings(`#commentUser`);\r\n    let userName = userNameInput.val();\r\n    let userMessage = userMessageInput.val();\r\n    if (userName && userMessage) {\r\n      let userId = Math.floor(Math.random() * 100 * userName.length);\r\n      this.ajax({\r\n        url: this.settings.urlAddComment,\r\n        data: {\r\n          id_user: userId,\r\n          name: userName,\r\n          text: userMessage\r\n        },\r\n        success: data => {\r\n          (function (data, elem, arrComments) {\r\n            if (data.result && data.result === 1) {\r\n              const newComment = new Comment(userId, userName, userMessage);\r\n              newComment.render(elem);\r\n              arrComments.push({\r\n                \"id_comment\": userId,\r\n                \"name\": userName,\r\n                \"text\": userMessage\r\n              });\r\n              userNameInput.val('');\r\n              userMessageInput.val('');\r\n            } else if (data.result === 0) {\r\n              alert(`Сервер вернул ошибку: ${data.error_message}`);\r\n            }\r\n          }(data, this.$elCommentBlock, this.arrAllComments))\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Обертка для ajax запроса.\r\n   * @param {Object} param параметры запроса.\r\n   */\r\n  ajax(param) {\r\n    $.ajax({\r\n      url: param.url,\r\n      type: 'GET',\r\n      dataType: 'json',\r\n      data: param.data,\r\n      success: param.success,\r\n      error: (data, textStatus, jqXHR) => console.error(textStatus, jqXHR),\r\n    });\r\n  },\r\n\r\n};","\"use strict\";\r\n/*\r\nconst birthdayInput = {\r\n  idInputDatepicker: 'birthday',\r\n  errorMessage: 'Введите дату рождения в формате \"дд/мм/гггг\"',\r\n  regExpCity: /^[0-3][0-9]\\/[01][0-9]\\/[12][0-9]{3}$/,\r\n\r\n  init() {\r\n    $(`#${this.idInputDatepicker}`).datepicker({\r\n      changeMonth: true,\r\n      changeYear: true,\r\n      firstDay: 1,\r\n      dayNamesMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],\r\n      dayNames: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],\r\n      dateFormat: 'dd/mm/yy',\r\n      monthNamesShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\r\n    });\r\n  },\r\n\r\n  validate(elem) {\r\n    return this.regExpCity.test(elem.value.trim());\r\n  },\r\n};\r\n*/\r\n\r\n/*\r\n/!**\r\n * Обрабатывает input для ввода города, при вводе названия города предлагает варианты.\r\n * @property {string} idInputCity id HTML элемента input.\r\n * @property {string} errorMessage содержит сообщение об ошибке валидации для поля \"Город\".\r\n * @property {string} urlJSON путь к файлу .json с объектами городов.\r\n * @property {string} idElemListSearchCity id HTML элемента в котором пердлагаются варианты городов.\r\n * @property {RegExp} regExpCity регулярное выражение для валидации поля \"Город\".\r\n *!/\r\nconst inputCity = {\r\n  idInputCity: 'city',\r\n  errorMessage: 'Введите город',\r\n  urlJSON: 'json/city.json',\r\n  idElemListSearchCity: 'search-city',\r\n  regExpCity: /^[a-zа-яё ]{2,}$/i,\r\n  dataCity: [],//\r\n\r\n  /!**\r\n   * Вешает события на input для ввода города.\r\n   *!/\r\n  init() {\r\n    $(`#${this.idInputCity}`).on('keyup click', event => this.keyPressHandler(event));\r\n    // .on(' focusout', () => this.outOptionCities(null, true));\r\n\r\n    $.getJSON(this.urlJSON, (data) => this.dataCity = data);//\r\n  },\r\n\r\n  /!**\r\n   * Обработчик события нажатия на кнопки клавиатуры при вводе названия города.\r\n   * Если символов введено меньше 3 то удаляем окно с предлогаемым списком городов, если он есть.\r\n   * Если символов введено 3 и больше, отправляет запрос на получения массива с объектами городов,\r\n   * инициализирует регулярное выражение и вызывает функцию для парсинка массива с городами.\r\n   * @param {Event} event событие произошедшее в поле ввода названия города.\r\n   *!/\r\n  keyPressHandler(event) {\r\n    const input = event.target;\r\n    const dataUser = input.value;\r\n    if (dataUser.length < 3) {\r\n      this.outOptionCities(null, true);\r\n    } else {\r\n      const regExp = new RegExp(`^${dataUser}[\\wа-яё ]{0,}`, 'i');\r\n\r\n      this.parsJSON(this.dataCity, regExp);//\r\n\r\n      // $.getJSON(this.urlJSON, (data) => this.parsJSON(data, regExp));\r\n    }\r\n  },\r\n\r\n  /!**\r\n   * Парсит массив с объектами городов проверяя каждое название города на соотвествие регулярному выражению\r\n   * и из тех которые прозодят проверку пр регулярке складывает в отдельный массив.\r\n   * Запускает метод вывода этих городов пользователю.\r\n   * @param {Object[]} data массив объектов городов для проверки регулярным выражением.\r\n   * @param {Object} regExp регулярное выражение.\r\n   *!/\r\n  parsJSON(data, regExp) {\r\n    let arrSearchObjectCity = [];\r\n    for (const obj of data) {\r\n      if (regExp.test(obj.name)) {\r\n        const objOut = {};\r\n        for (const propName in obj) {\r\n          objOut[propName] = obj[propName];\r\n        }\r\n        if (arrSearchObjectCity.length > 10) break;\r\n        arrSearchObjectCity.push(objOut);\r\n      }\r\n    }\r\n    if (!arrSearchObjectCity.length > 0) {\r\n      this.outOptionCities(arrSearchObjectCity, true);\r\n    } else {\r\n      this.outOptionCities(arrSearchObjectCity);\r\n    }\r\n  },\r\n\r\n\r\n  /!**\r\n   * Выводит предлагаемый список городов пользователю или скрывает этот список.\r\n   * @param {Object[]} arrObjCities массив объектов городов для вывода пользователю.\r\n   * @param {boolean} remove если true то удаляем список городо, false выводим.\r\n   *!/\r\n  outOptionCities(arrObjCities, remove = false) {\r\n    if (remove) {\r\n      $(`#${this.idElemListSearchCity}`).remove();\r\n    } else {\r\n      const $ulOut = $(document.createElement('ul')).attr('id', this.idElemListSearchCity)\r\n        .click(event => this.clickLiHandler(event));\r\n      for (const obj of arrObjCities) {\r\n        $ulOut.append($(document.createElement('li')).attr('value', obj.id).text(obj.name));\r\n      }\r\n      if ($(`#${this.idElemListSearchCity}`).length > 0) {\r\n        $(`#${this.idElemListSearchCity}`).replaceWith($ulOut);\r\n      }\r\n      $(`#${this.idInputCity}`).after($ulOut);\r\n    }\r\n  },\r\n\r\n  clickLiHandler(event) {\r\n    if (event.target.tagName === 'LI') {\r\n      $(`#${this.idInputCity}`).val(event.target.innerText);\r\n    }\r\n    this.outOptionCities(null, true);\r\n  },\r\n\r\n  /!**\r\n   * Проводит валидацию поля input.\r\n   * @param {HTMLElement} elem элемент input.\r\n   * @return {boolean} возвращает true если элемент проходит валидацию иначе false.\r\n   *!/\r\n  validateSelect(elem) {\r\n    return this.regExpCity.test(elem.value.trim());\r\n  },\r\n};\r\n*/\r\n\r\n\r\n/**\r\n * Валидация формы.\r\n * @property {string} idInputName id HTML элемента input для ввода имени.\r\n * @property {string} idInputPhone id HTML элемента input для ввода телефона.\r\n * @property {string} idInputEmail id HTML элемента input для ввода email.\r\n * @property {string} idInputMessage id HTML элемента input для ввода сообщения.\r\n * @property {string} idBtnSubmit id HTML элемента button для отправки формы.\r\n * @property {string} classElemOutErr class HTML элемента div для вывода сообщения об ошибке валидации поля.\r\n * @property {string} classNoValidateInput class HTML элемента input или textarea\r\n * для выделения рамкой в случае ошибки валидации поля.\r\n * @property {string} classValidateInput class HTML элемента input или textarea\r\n * для выделения рамкой в случае удачной валидации поля.\r\n * @property {Object} errorMessage обект с сообщениями об ошибках валидации.\r\n * @property {string} errorMessage.name содержит сообщение об ошибке валидации для поля \"имя\".\r\n * @property {string} errorMessage.phone содержит сообщение об ошибке валидации для поля \"телефон\".\r\n * @property {string} errorMessage.message содержит сообщение об ошибке валидации для поля \"сообщение\".\r\n * @property {RegExp} regExpName регулярное выражение для валидации поля \"имя\".\r\n * @property {RegExp} regExpPhone регулярное выражение для валидации поля \"телефон\".\r\n * @property {RegExp} regExpEmail регулярное выражение для валидации поля \"email\".\r\n * @property {RegExp} regExpMessage регулярное выражение для валидации поля \"сообщение\".\r\n */\r\nconst validateForm = {\r\n  // birthdayInput,\r\n  idInputName: 'nameUser',\r\n  idInputPhone: 'phone',\r\n  idInputEmail: 'email',\r\n  idInputMessage: 'commentUser',\r\n  idBtnSubmit: 'btnAddComment',\r\n  classElemOutErr: 'error-message',\r\n  classNoValidateInput: 'error-input',\r\n  classValidateInput: 'success-input',\r\n  errorMessage: {\r\n    nameUser: 'Имя должно содержать только буквы',\r\n    phone: 'Телефон должен быть в формате \"+7(000)000-0000\"',\r\n    email: 'Не корректный email',\r\n    commentUser: 'Вы забыли написать комментарий',\r\n    /*\r\n        city: inputCity.errorMessage,\r\n        birthday: birthdayInput.errorMessage,\r\n    */\r\n  },\r\n  regExpName: /^[a-zа-яё]{2,}$/i,\r\n  regExpPhone: /^\\+\\d\\(\\d{3}\\)\\d{3}-\\d{4}$/,\r\n  regExpEmail: /^[a-z0-9-_.]+@[a-z]+.[a-z]{2,4}$/i,\r\n  regExpMessage: /[\\wа-яё]{3,}/,\r\n\r\n\r\n  /**\r\n   * Запуск валидации формы.\r\n   * Проходится по всем нужным элементам и запускает для каждого валидацию, если хоть одна есть ошибка валидации то возвращаем false, иначе true.\r\n   * @param {jQuery} form jQuery элемент валидируемой формы.\r\n   */\r\n  startValidate(form) {\r\n    let arr = $(form).find('input, textarea');\r\n    let valid = true;\r\n    for (let elem of arr) {\r\n      if (elem.id === this.idBtnSubmit) continue;\r\n      let validateResult = this.validateInput(elem);\r\n      if (!validateResult) {\r\n        this.outMessageFailValidate(elem);\r\n        valid = false;\r\n      } else {\r\n        this.outMessageFailValidate(elem, true);\r\n      }\r\n    }\r\n    return valid;\r\n  },\r\n\r\n  /**\r\n   * Валидация каждого поля своим регулярным выражением.\r\n   * @param {HTMLElement} elem элемент, который требуется провалидировать.\r\n   * @return {boolean} возвращает true если элемент проходит валидацию иначе false.\r\n   */\r\n  validateInput(elem) {\r\n    switch (elem.id) {\r\n      case this.idInputName:\r\n        return this.regExpName.test(elem.value.trim());\r\n\r\n      case this.idInputPhone:\r\n        return this.regExpPhone.test(elem.value.trim());\r\n\r\n      case this.idInputEmail:\r\n        return this.regExpEmail.test(elem.value.trim());\r\n\r\n      case this.idInputMessage:\r\n        return this.regExpMessage.test(elem.value.trim());\r\n\r\n      /*\r\n            case inputCity.idInputCity:\r\n              return inputCity.validateSelect(elem);\r\n\r\n            case this.birthdayInput.idInputDatepicker:\r\n              return this.birthdayInput.validate(elem);\r\n      */\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Организует вывод информации пользователю(валидация прошла или нет)\r\n   * @param {HTMLElement} elem в котором прошла валидация и который надо показать пользователю, если валидация удачна, то зеленый border у элемента, если не удачна, то красный border и сообщение об ошибке.\r\n   * @param {boolean} validate если true то действуем по алгоритму успех, false действуем по алгоритму ошибка.\r\n   */\r\n  outMessageFailValidate(elem, validate = false) {\r\n    let elemError = document.getElementById(`error-${elem.id}`);\r\n    if (!validate) {\r\n      if (!elemError) {\r\n        elemError = document.createElement('div');\r\n        elemError.id = `error-${elem.id}`;\r\n        elemError.classList.add(this.classElemOutErr);\r\n        elem.parentElement.insertBefore(elemError, elem.nextElementSibling);\r\n      }\r\n      elem.classList.remove(this.classValidateInput);\r\n      elem.classList.add(this.classNoValidateInput);\r\n      elemError.innerText = '- ' + this.errorMessage[elem.id];\r\n      elem.value = '';\r\n\r\n      $(elem).effect('bounce');\r\n\r\n    } else {\r\n      if (elemError) {\r\n        elemError.parentElement.removeChild(elemError);\r\n      }\r\n      elem.classList.remove(this.classNoValidateInput);\r\n      elem.classList.add(this.classValidateInput);\r\n      elem.value = elem.value.trim();\r\n    }\r\n  },\r\n};","class Basket {\r\n  constructor(basketSettings) {\r\n    this.settings = basketSettings;\r\n\r\n    this.countGoods = 0; //Общее кол-во товаров в корзине\r\n    this.amount = 0; //Общая стоимость товаров\r\n    this.basketItems = []; //Массив для хранения товаров\r\n    this.$productsWrap = null;\r\n    this.$elemCounter = $(`#${basketSettings.idCountGoods}`);\r\n    this.$elemTotalPrice = null;\r\n  }\r\n\r\n  render($jQueryElement) {\r\n    this.$productsWrap = $('<div />', {\r\n      class: this.settings.classWrapProducts,\r\n    });\r\n\r\n    this.$elemTotalPrice = $('<span />', {\r\n      class: this.settings.classTotalValue\r\n    });\r\n\r\n    let $priceTotalWrap = $('<div />', {\r\n      class: this.settings.classWrapPriceTotal,\r\n    }).append($('<span />', {\r\n      class: this.settings.classTotalDescription,\r\n      text: 'total'\r\n    })).append(this.$elemTotalPrice);\r\n\r\n    let $buttonsWrap = $('<div />', {\r\n      class: this.settings.classWrapButton,\r\n    }).append($('<button />', {\r\n      class: this.settings.classButtonCheckout,\r\n      text: 'Checkout'\r\n    })).append($('<button />', {\r\n      class: this.settings.classButtonGoToCart,\r\n      text: 'Go to cart'\r\n    }));\r\n\r\n    $jQueryElement.append(this.$productsWrap)\r\n      .append($priceTotalWrap)\r\n      .append($buttonsWrap);\r\n\r\n\r\n    //Получаем уже добавленные в корзину товары\r\n    this.getBasket();\r\n    // $productsWrap.append(new Good().render());\r\n  }\r\n\r\n  getBasket() {\r\n    //let self = this;\r\n    $.ajax({\r\n      type: 'GET',\r\n      url: this.settings.pathJsonFile,\r\n      context: this,\r\n      success: function (data) {\r\n\r\n        this.amount = data.amount;\r\n\r\n        for (let item of data.basket) {\r\n          this.countGoods += item.quantity;\r\n          this.basketItems.push(item);\r\n        }\r\n        this.refresh();\r\n      }\r\n      ,\r\n      error: function (error) {\r\n        console.log('Произошла ошибка при получении данных', error);\r\n      },\r\n      dataType: 'json'\r\n    });\r\n  }\r\n\r\n  add(id_product, title, price, src) {\r\n\r\n    let basketNewItem = {\r\n      id_product,\r\n      price, //price: price\r\n      title,\r\n      src,\r\n      quantity: 1\r\n    };\r\n    let ind = this.basketItems.findIndex(function (elem) {\r\n      return (elem.id_product === id_product);\r\n    });\r\n    if (ind === -1) {\r\n      this.basketItems.push(basketNewItem);\r\n    } else {\r\n      this.basketItems[ind].quantity++;\r\n    }\r\n\r\n    this.countGoods++;\r\n    this.amount += price; //this.amount = this.amount + price;\r\n\r\n    this.refresh(); //Перерисовываем корзину\r\n  }\r\n\r\n  remove(idProduct) {\r\n    for (let arrInd in this.basketItems) {\r\n      if (this.basketItems[arrInd].id_product === idProduct) {\r\n        this.amount -= this.basketItems[arrInd].price;\r\n        this.countGoods--;\r\n        if (this.basketItems[arrInd].quantity > 1) {\r\n          this.basketItems[arrInd].quantity--;\r\n        } else {\r\n          this.basketItems.splice(arrInd, 1);\r\n        }\r\n        this.refresh();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  setCounterAndTotalPrice() {\r\n    let count = this.countGoods;\r\n    if (count > 0) {\r\n      this.$elemCounter.text(count)\r\n        .addClass('active');\r\n      this.$elemTotalPrice.text('$' + this.amount);\r\n\r\n    } else {\r\n      this.$elemCounter.text('')\r\n        .removeClass('active');\r\n      this.$elemTotalPrice.text('$' + this.amount);\r\n    }\r\n  }\r\n\r\n  refresh() {\r\n    this.setCounterAndTotalPrice();\r\n    if (this.basketItems.length === 0) {\r\n      this.$productsWrap.empty()\r\n        .text('Товаров в карзине нет!');\r\n    } else {\r\n      this.$productsWrap.empty();\r\n      for (let item of this.basketItems) {\r\n        this.$productsWrap.append(new Good(item.id_product, item.title, item.price, item.src, item.quantity).render());\r\n      }\r\n    }\r\n  }\r\n}","class Good {\r\n  constructor(id, title, price, src, quantity) {\r\n    this.id = id;\r\n    this.title = title;\r\n    this.price = price;\r\n    this.src = src;\r\n    this.quantity = quantity;\r\n  }\r\n\r\n  render() {\r\n    return $(`<div id=\"${this.id}\" class=\"acc__cart__product\">\r\n                    <div class=\"acc__cart__product__img\">\r\n                      <img src=\"${this.src}\" width=\"72\" height=\"85\" alt=\"Rebox Zane\">\r\n                    </div>\r\n                    <div class=\"acc__cart__product__data\">\r\n                      <span class=\"product__data_head\">${this.title}</span>\r\n                      <span class=\"product__data_quality\">\r\n                        <i class=\"fa fa-star\" aria-hidden=\"true\"></i>\r\n                        <i class=\"fa fa-star\" aria-hidden=\"true\"></i>\r\n                        <i class=\"fa fa-star\" aria-hidden=\"true\"></i>\r\n                        <i class=\"fa fa-star\" aria-hidden=\"true\"></i>\r\n                        <i class=\"fa fa-star quality-white\" aria-hidden=\"true\"></i>\r\n                      </span>\r\n                      <div class=\"product__data_calculation\">\r\n                        <span class=\"product__data_number\">${this.quantity}</span> x <span class=\"product__data_price\">$${this.price}</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"acc__cart__product__del\">\r\n                      <button data-type=\"del\" data-id=\"${this.id}\">\r\n                        <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </div>`);\r\n  }\r\n}\r\n\r\n\r\n","const basketRun = {\r\n  settings: {\r\n    classWrapProductItems: 'wrap-product-item',\r\n    classProductItem: 'product-item',\r\n    classProductTitle: 'title-item',\r\n    classProductPrice: 'price-val',\r\n    classProductImage: 'product-img',\r\n    idWrapTopBasket: 'wrap-top-basket',\r\n    basketSettings: {\r\n      pathJsonFile: './json/basket_get.json',\r\n      classWrapProducts: 'acc__cart__products-wrap',\r\n      classWrapPriceTotal: 'acc__cart__price-total',\r\n      classWrapButton: 'acc__cart__buttons',\r\n      classTotalDescription: 'price-total_description',\r\n      classTotalValue: 'price-total_value',\r\n      idTotalValue: 'total-top-basket',\r\n      classButtonCheckout: 'buttons_checkout',\r\n      classButtonGoToCart: 'buttons_go-to-cart',\r\n      idCountGoods: 'count-goods',\r\n    }\r\n  },\r\n\r\n  $elemWrapTopBasket: null,\r\n  $ElemDropBasket: null,\r\n  basket: null,\r\n\r\n  init() {\r\n    this.$elemWrapTopBasket = $(`#${this.settings.idWrapTopBasket}`);\r\n    this.basket = new Basket(this.settings.basketSettings);\r\n    this.basket.render(this.$elemWrapTopBasket);\r\n    this.$elemWrapTopBasket.on('click', 'button', event => {\r\n      let target = $(event.currentTarget);\r\n      if (target.attr('data-type') === 'del') {\r\n        this.basket.remove(parseInt(target.attr('data-id')))\r\n      }\r\n    });\r\n    let $wrapProduct = $(`.${this.settings.classWrapProductItems}`);\r\n    if (!$wrapProduct.length > 0) return;\r\n    $wrapProduct.on('click', 'button[data-type = add]', (event) => {\r\n      let $elem = $(event.currentTarget).parents(`.${this.settings.classProductItem}`);\r\n      this.goodAddToBasket($elem);\r\n      this.showDialog();\r\n    });\r\n    this.droppInit();\r\n  },\r\n\r\n  goodAddToBasket($elem) {\r\n    let param = [\r\n      parseInt($elem.attr('data-id')),\r\n      $elem.find(`.${this.settings.classProductTitle}`).text(),\r\n      parseInt($elem.find(`.${this.settings.classProductPrice}`).text()),\r\n      $elem.find(`.${this.settings.classProductImage}`).attr('src')\r\n    ];\r\n    this.basket.add(...param);\r\n  },\r\n\r\n  droppInit() {\r\n    this.$ElemDropBasket = $('<div />', {\r\n      id: 'basket',\r\n    }).appendTo($('body'))\r\n      .append($('<div />', {\r\n        text: 'Для добавления в корзину перетащите суда товар!',\r\n        class: 'dropp-basket-text'\r\n      }));\r\n\r\n    //Добавление товара в карзину перетаскиванием\r\n    $('.product-item').draggable({\r\n      helper: 'clone',\r\n      scope: 'good',\r\n      addClasses: true,\r\n      cursorAt: {left: 50, top: 50},\r\n      cursor: \"pointer\",\r\n      start: (event, ui) => {\r\n        ui.helper.addClass('ui-drag-activate_good');\r\n        this.$ElemDropBasket.addClass('basket-dropp', 500);\r\n      },\r\n      stop: () => {\r\n        this.$ElemDropBasket.removeClass('basket-dropp', 500);\r\n      }\r\n    });\r\n\r\n    $('#basket').droppable({\r\n      activeClass: 'ui-drag-activate_basket',\r\n      scope: 'good',\r\n      tolerance: \"pointer\",\r\n      drop: (event, ui) => {\r\n        this.goodAddToBasket(ui.draggable);\r\n        this.showDialog();\r\n      },\r\n    });\r\n  },\r\n\r\n  showDialog() {\r\n    let $dialog = $('<div />', {\r\n      text: 'Товар добавлен в корзину'\r\n    }).dialog({\r\n      appendTo: \"body\",\r\n      hide: {effect: \"scale\", duration: 500},\r\n      position: {my: \"center top\", at: \"center top+50px\"},\r\n      close: () => $dialog.remove(),\r\n    });\r\n    setTimeout(() => {\r\n      $dialog.dialog('close');\r\n    }, 1000);\r\n  },\r\n};\r\n$(document).ready(() => basketRun.init());"]}